package baekjoon;

import java.io.*;
import java.util.*;

public class Main_17135_캐슬디펜스 {
	
	static ArrayList<int[]> enemy;
	static ArrayList<int[]> origin;
	static int N, M, D, max, kill = Integer.MIN_VALUE;
	static int numbers[];
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringBuilder sb = new StringBuilder();
		StringTokenizer st;
		
		st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		D = Integer.parseInt(st.nextToken());
		int[][] map = new int[N][M];	// N + 1행에는 성이 있고 궁수를 둘 수 있음
		numbers = new int[3];				// 궁수 위치 조합 만들기 위한 배열
		enemy = new ArrayList<int[]>();		// 적의 위치를 담을 배열
		origin = new ArrayList<int[]>();
		
		int num;
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j < M; j++) {
				num = Integer.parseInt(st.nextToken());
				if(num == 1) {
					System.out.println(i + " - " + j);
					enemy.add(new int[] {i, j});
					origin.add(new int[] {i, j});
				}
				map[i][j] = num;
			}
		}
		
		System.out.println(max);
		comb(0, 0);
		
		br.close();
//		bw.append(sb.toString());
		bw.flush();
		bw.close();
	}
	private static void comb(int start, int cnt) {
		if(cnt == 3) {
			System.out.println(Arrays.toString(numbers));
			int res = game();
//			System.out.println(res);
			if(max < res)
				max = res;
			kill = 0;
			enemy.addAll(origin);
			return;
		}
		
		for(int i = start; i < M; i++) {
			numbers[cnt] = i;
			comb(i + 1, cnt + 1);
		}
		
	}
	private static int game() {
		for(int i = 0; i < enemy.size(); i++)
			System.out.println(enemy.get(i)[0]);
		while(enemy.size() != 0) {
			for(int i = 0; i < 3; i++) {
				for(int j = 0; j < enemy.size(); j++) {
					if(Math.abs(N - enemy.get(j)[0]) + Math.abs(numbers[i] - enemy.get(j)[1]) <= D) {
						kill++;
						enemy.remove(j);
						break;
					}
				}
			}
			for(int i = 0; i < enemy.size(); i++) {
				System.out.println(enemy.get(i)[0]);
				enemy.get(i)[0] -= 1;
				if(enemy.get(i)[0] == N)
					enemy.remove(i);
			}
		}
		return kill;
	}
	
	
	
	
}
