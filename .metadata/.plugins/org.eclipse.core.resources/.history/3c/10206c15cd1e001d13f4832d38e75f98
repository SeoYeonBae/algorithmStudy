package baekjoon;

import java.io.*;
import java.util.*;

public class Main_1987_알파벳 {
	
	static int[] dr = {-1 , 1, 0, 0};
	static int[] dc = {0 , 0, -1, 1};
	static int res = 1, R, C;
	static char[][] map;
	static List<Character> path;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		
		map = new char[R][C];
		
		for (int i = 0; i < R; i++) {
			String s = br.readLine();
			for (int j = 0; j < C; j++) {
				map[i][j] = s.charAt(j);
			}
		}
		
		int horseR = 0, horseC = 0;
		
		path = new ArrayList<>();
		path.add(map[horseR][horseC]);
		
		dfs(horseR, horseC);
		System.out.println(res);
	}

	private static void dfs(int horseR, int horseC) {
		for(int d = 0; d < 4; d++) {
			int nr = horseR + dr[d];
			int nc = horseC + dc[d];
			
			if(nr < 0 || nr >= R || nc < 0 || nc >= C)
				continue;
			
			if(path.contains(map[nr][nc]))
				continue;
			
			path.add(map[nr][nc]);
			res++;
			dfs(nr, nc);
		}
		
	}
}
