package baekjoon;

import java.io.*;
import java.util.*;

public class Main_1260_DFSì™€BFS {

	static int N, M;
	static int[][] map;
	static int[] visited;
	static StringBuilder sb;
	static Queue<Integer> q;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		sb = new StringBuilder();
		StringTokenizer st;
		
		st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken()) + 1;
		M = Integer.parseInt(st.nextToken());
		int V = Integer.parseInt(st.nextToken());
		
		map = new int[N][N];
		visited = new int[N];
		
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int r = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			map[r][c] = 1;
		}
		
		for(int i = 1; i < N; i++) {
			for(int j = 1; j < N; j++)
				System.out.print(map[i][j] + " ");
			System.out.println();
		}
		q = new ArrayDeque<Integer>();
		
		sb.append(V).append(" ");
		visited[V] = 1;
		dfs(V);
		sb.append("\n");
		Arrays.fill(visited, 0);
//		bfs(V);
		br.close();
		bw.append(sb.toString());
		bw.flush();
		bw.close();
	}


	private static void dfs(int v) {
		for(int i = 1; i < N; i++) {
			System.out.println(v + " " + i);
			if(map[v][i] == 1 & visited[i] == 0) {
				sb.append(i).append(" ");
				map[v][i] = 0;
				visited[i] = 1;
				dfs(i);
			}
		}
		return;
	}
	
	private static void bfs(int v) {
		q.offer(v);
		
		while(!q.isEmpty()) {
			int b = q.poll();
			sb.append(b).append("\n");
			for(int i = 1; i < N; i++) {
				if(map[b][i] == 1) {
					q.offer(i);
					map[b][i] = 0;
//					map[i][b] = 0;
				}
			}
		}
		
	}
	
}
